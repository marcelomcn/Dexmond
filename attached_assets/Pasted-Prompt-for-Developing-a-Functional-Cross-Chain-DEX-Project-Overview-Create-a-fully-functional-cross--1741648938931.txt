Prompt for Developing a Functional Cross-Chain DEX
Project Overview
Create a fully functional cross-chain decentralized exchange (DEX) that enables users to swap tokens across different blockchain networks. The DEX should handle real blockchain interactions, not simulations or mock functions.
Technical Requirements
Core Functionality

Cross-Chain Swapping: Implement actual cross-chain token swaps using established bridges (like Wormhole, Axelar, LayerZero, or Connext).
Wallet Integration: Support connection to real wallets (MetaMask, WalletConnect) with proper authentication flow.
Token Management: Implement functions to fetch real token balances, prices, and metadata from blockchain APIs.
Transaction Handling: Create proper transaction submission, signing, and confirmation tracking.
Price Discovery: Implement actual price fetching from on-chain sources or reliable oracles (Chainlink, Band Protocol).

Blockchain Integration

Supported Networks: Include at least Ethereum, Binance Smart Chain, and one L2 (Arbitrum, Optimism, or Polygon).
RPC Connections: Use proper RPC endpoints for each network.
Smart Contracts: Implement the actual smart contract interactions (no placeholders).
Gas Estimation: Integrate accurate gas calculation for transactions.

API Integration

Blockchain APIs: Use ethers.js, web3.js, or viem for blockchain interactions.
Price Feeds: Integrate with CoinGecko, 1inch, or on-chain DEX aggregator APIs.
Cross-Chain Messaging: Use an existing bridge protocol's API for cross-chain communication.

Technical Implementation Guidelines

No Mock Data: Do not use any mock or placeholder data. All data should be fetched from real sources.
Error Handling: Implement proper error handling for network failures, rejected transactions, etc.
State Management: Use proper state management (Redux, Zustand, or Context API) to track cross-chain operations.
Testing: Include unit tests for core functions with actual testnet connections where possible.

Project Structure

Frontend: React-based UI with web3 integration
Backend Services: If needed for indexing or caching
Smart Contracts: Required relay or adapter contracts if needed
Configuration: Network configs, token lists, and bridge settings

Development Steps

Start by setting up proper web3 provider connections to multiple networks
Implement wallet connection with real address resolution
Create functions to fetch token balances from multiple chains
Implement the token swap mechanism with a bridge protocol
Develop the UI for cross-chain token selection and swapping
Add transaction status tracking across chains
Implement proper error handling and user notifications

Important Notes

Use established libraries like ethers.js, web3.js, wagmi, or viem for blockchain interactions
Leverage existing cross-chain bridges rather than building your own
Use real RPC endpoints (Infura, Alchemy, or public RPCs)
All functionality should be real and working on testnets at minimum

Documentation Requirements
Include detailed documentation on:

How to configure the DEX for different networks
The cross-chain bridging mechanism used
Security considerations and best practices
How to test the functionality on testnets